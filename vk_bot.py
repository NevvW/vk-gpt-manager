import os
import sys
import threading
import time
from datetime import datetime, timedelta

import django
import requests
import vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType

from config import VK_TOKEN, GROUP_ID
from gpt_client import get_gpt_response, initialize_vectorization
from utils import HistoryManager, create_bitrix_request

project_root = os.path.dirname(os.path.abspath(__file__))

# 2) –¥–æ–±–∞–≤–ª—è–µ–º –≤ PYTHONPATH –ø–∞–ø–∫—É —Å –≤–∞—à–∏–º Django-–ø—Ä–æ–µ–∫—Ç–æ–º
sys.path.insert(0, os.path.join(project_root, 'order'))

os.environ.setdefault("DJANGO_SETTINGS_MODULE", "order.settings")

django.setup()

from main.models import Bot  # –∏–º–ø–æ—Ä—Ç –º–æ–¥–µ–ª–∏ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏


def get_bot_settings() -> Bot:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç Bot (pk=1) —Å —Ç–µ–∫—É—â–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.
    """

    return Bot.objects.get(pk=1)


def reminder_worker(vk, history_manager: HistoryManager):
    print("Reminder worker started")
    while True:
        history_manager.cursor.execute("""
            SELECT DISTINCT peer_id FROM dialog_history
        """)
        peer_ids = [row[0] for row in history_manager.cursor.fetchall()]

        now = datetime.utcnow()
        settings = get_bot_settings()

        REMINDER1_DELAY = settings.interval_first * 60 * 60
        REMINDER2_DELAY = settings.interval_second * 60 * 60
        reminder_text = settings.text_one_remember  # –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª–µ promt –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        final_text = settings.text_two_remember
        for peer_id in peer_ids:
            stage = history_manager.get_stage(peer_id)
            if stage >= 2:
                continue

            last_user_ts = history_manager.get_last_user_timestamp(peer_id)
            if not last_user_ts:
                continue

            elapsed = now - last_user_ts

            if stage == 0 and elapsed >= timedelta(seconds=REMINDER1_DELAY):
                vk.messages.send(peer_id=peer_id, message=reminder_text, random_id=0)
                history_manager.set_stage(peer_id, 1)

            elif stage == 1 and elapsed >= timedelta(seconds=REMINDER2_DELAY):
                vk.messages.send(peer_id=peer_id, message=final_text, random_id=0)
                history_manager.set_stage(peer_id, 2)

        time.sleep(10)


def send_delayed_message(vk, peer_id, message):
    # –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–∞
    print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è {peer_id} —Å {message}")
    vk.messages.send(
        peer_id=peer_id,
        message=message,
        random_id=0
    )


def keep_typing(vk, peer_id, duration, interval=4):
    """
    –ö–∞–∂–¥—ã–µ `interval` —Å–µ–∫—É–Ω–¥ —à–ª—ë–º setActivity,
    —á—Ç–æ–±—ã –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä ¬´–ø–µ—á–∞—Ç–∞–µ—Ç‚Ä¶¬ª –¥–µ—Ä–∂–∞–ª—Å—è –ø–æ–∫–∞ duration.
    """
    end_time = time.time() + duration
    while time.time() < end_time:
        vk.messages.setActivity(peer_id=peer_id, type='typing')
        time.sleep(interval)


def handle_new_message(vk, history_manager, settings, obj):
    peer_id = obj.get("peer_id")
    text = obj.get("text", "").strip()
    print(obj)
    if peer_id is None or text == "" or history_manager.in_blacklist(peer_id):
        print("–ü–û–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á—ë—Ä–Ω–æ–º —Å–ø–∏—Å–∫–µ")
        return

    # 1) –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
    vk.messages.markAsRead(
        peer_id=peer_id,
        start_message_id=obj.get("id")  # –∏–ª–∏ message_ids=[obj["id"]]
    )

    # 2) –∑–∞–ø—É—Å–∫–∞–µ–º ¬´–ø–µ—á–∞—Ç–∞–µ—Ç‚Ä¶¬ª –≤ —Ñ–æ–Ω–µ –Ω–∞ 30 —Å–µ–∫ (–∫–∞–∂–¥—ã–µ 4 —Å–µ–∫ —à–ª—ë–º –Ω–æ–≤—É—é aktivnost)
    threading.Thread(
        target=keep_typing,
        args=(vk, peer_id, 30),
        daemon=True
    ).start()

    # 3) –°–æ–±–∏—Ä–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
    history_manager.set_stage(peer_id, 0)
    ban_list = [w.strip() for w in settings.ban_word.split(",") if w.strip()]
    if any(bw in text for bw in ban_list):
        history_manager.put_in_blacklist(peer_id, "ban_word")
        return

    history = history_manager.get_history(peer_id)
    history_manager.add_message(peer_id, {"role": "user", "content": text})

    assistant_content, assistant_entry = get_gpt_response(
        history,
        text,
        settings.agent_promt + settings.key_word,
        settings.proxy_host,
        settings.proxy_port,
        settings.proxy_user,
        settings.proxy_password
    )

    if assistant_entry["role"] == "MANAGER":
        print("–Ω—É–∂–Ω–æ –ø–æ–∑–≤–∞—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä–∞")
        history_manager.put_in_blacklist(peer_id, "manager")
        user = vk.users.get(user_ids=obj.get("from_id"))[0]
        create_bitrix_request(f"{user['first_name']} {user['last_name']} | VK")
        send_delayed_message(vk, peer_id, "–û—Ç–ª–∏—á–Ω–æ, —è –í–∞—Å –ø–æ–Ω—è–ª! –°–∫–æ—Ä–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é.")
        return
    else:
        history_manager.add_message(peer_id, assistant_entry)

    # 4) –ß–µ—Ä–µ–∑ 30 —Å–µ–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    timer = threading.Timer(
        interval=30,
        function=send_delayed_message,
        args=(vk, peer_id, assistant_content)
    )
    timer.daemon = True
    timer.start()


def main():
    vk_session = vk_api.VkApi(token=VK_TOKEN)
    longpoll = VkBotLongPoll(vk_session, group_id=GROUP_ID)
    vk = vk_session.get_api()
    history_manager = HistoryManager(max_history_length=10)

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω... –û–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π.")
    # (–µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å reminder_worker ‚Äî –æ—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ)
    threading.Thread(target=reminder_worker,
                     args=(vk, history_manager),
                     daemon=True).start()

    settings = get_bot_settings()
    initialize_vectorization(
        proxy_host=settings.proxy_host,
        proxy_port=settings.proxy_port,
        proxy_user=settings.proxy_user,
        proxy_password=settings.proxy_password
    )
    try:
        while True:
            try:
                for event in longpoll.listen():
                        if event.type == VkBotEventType.MESSAGE_NEW:
                            obj = event.obj.message or event.obj
                            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∂–¥–æ–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
                            threading.Thread(
                                target=handle_new_message,
                                args=(vk, history_manager, get_bot_settings(), obj),
                                daemon=True
                            ).start()
            except requests.exceptions.ReadTimeout:
                print("üîÅ –¢–∞–π–º–∞—É—Ç VK. –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...")
                continue
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ longpoll: {e}")
                time.sleep(3)
    except KeyboardInterrupt:
        print("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞... –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î.")
    finally:
        history_manager.close()


if __name__ == "__main__":
    main()
